#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

// include

struct XY
{
    int x, y;
    XY(int X, int Y) : x(X), y(Y) { }
    XY() : x(0), y(0) { }
};

struct Rect
{
    int x, y, w, h;
    Rect() : x(0), y(0), w(0), h(0) { }
    Rect(int X, int Y, int W, int H) : x(X), y(Y), w(W), h(H) { }

    inline bool Contains(const XY& p) const { return (p.x >= x && p.y >= y && p.x < x + w && p.y < y + h); }
    inline bool Intersects(const Rect& r) const { return !(r.x > (x + w) || (r.x + r.w) < x || r.y > (y + h) || (r.y + r.h) < y); }
};

//A single layer of a quad tree
class QuadTree
{
public:
    // Arbitrary constant to indicate how many elements can be stored in this quad tree node
    static const int QT_NODE_CAPACITY = 4;

    // Axis-aligned bounding box stored as a center with half-dimensions
    // to represent the boundaries of this quad tree
    Rect bounds;

    //data inside
    XY points[4];
    int sz;

    QuadTree* nw;
    QuadTree* ne;
    QuadTree* sw;
    QuadTree* se;

    //Create a new quadtree
    QuadTree(const Rect bounds);

    bool Insert(const XY p);
    bool Subdivide();
    void DelChildren();
    void Resize(const Rect NewBounds);

    std::vector<XY> QueryRange(const Rect& range);
    int QueryCount(const Rect& range);
    ~QuadTree();
};

QuadTree::QuadTree(Rect Bounds)
{
    bounds = Bounds;
    for (int i = 0; i < QT_NODE_CAPACITY; i++)
        points[i] = XY();
    sz = 0;
    ne = 0;
    se = 0;
    nw = 0;
    sw = 0;
}

bool QuadTree::Insert(XY p)
{
    //Ignore objects which are outside
    if (!bounds.Contains(p))
        return false;

    //If there is space in this quad tree, add the object here
    if (sz < QT_NODE_CAPACITY)
    {
        points[sz++] = p;
        return true;
    }

    //Otherwise, we need to subdivide then add the point to whichever node will accept it
    if (nw == 0)
        Subdivide();

    if (nw->Insert(p) || ne->Insert(p) || sw->Insert(p) || se->Insert(p))
        return true;

    //Otherwise, the point cannot be inserted for some unknown reason (which should never happen)
    return false;
}

bool QuadTree::Subdivide()
{
    if (ne != 0 || nw != 0 || sw != 0 || se != 0)
        return false;

    ne = new QuadTree(Rect(bounds.x + (bounds.w >> 1), bounds.y, bounds.w >> 1, bounds.h >> 1));
    se = new QuadTree(Rect(bounds.x + (bounds.w >> 1), bounds.y + (bounds.h >> 1), bounds.w >> 1, bounds.h >> 1));
    nw = new QuadTree(Rect(bounds.x, bounds.y, bounds.w >> 1, bounds.h >> 1));
    sw = new QuadTree(Rect(bounds.x, bounds.y + (bounds.h >> 1), bounds.w >> 1, bounds.h >> 1));
    return true;
}

void QuadTree::DelChildren()
{
    if (nw != 0)
    {
        nw->DelChildren();
        delete nw;
        nw = 0;
    }
    if (ne != 0)
    {
        ne->DelChildren();
        delete ne;
        ne = 0;
    }
    if (sw != 0)
    {
        sw->DelChildren();
        delete sw;
        sw = 0;
    }
    if (se != 0)
    {
        se->DelChildren();
        delete se;
        se = 0;
    }
}

void QuadTree::Resize(Rect New)
{
    bounds = New;
    if (ne != 0) ne->Resize(Rect(bounds.x + (bounds.w >> 1), bounds.y, bounds.w >> 1, bounds.h >> 1));
    if (nw != 0) nw->Resize(Rect(bounds.x + (bounds.w >> 1), bounds.y + (bounds.h >> 1), bounds.w >> 1, bounds.h >> 1));
    if (se != 0) se->Resize(Rect(bounds.x, bounds.y, bounds.w >> 1, bounds.h >> 1));
    if (sw != 0) sw->Resize(Rect(bounds.x, bounds.y + (bounds.h >> 1), bounds.w >> 1, bounds.h >> 1));
}

void AddGroup(std::vector<XY>& vtr, const std::vector<XY> &toAdd)
{
    for (unsigned int i = 0; i < toAdd.size(); i++)
        vtr.push_back(toAdd[i]);
}

std::vector<XY> QuadTree::QueryRange(const Rect& range)
{
    // Prepare an array of results
    std::vector<XY> pointsInRange;

    // Automatically abort if the range does not collide with this quad
    if (!bounds.Intersects(range))
        return pointsInRange; // empty list

    // Check objects at this quad level
    for (int p = 0; p < sz; p++)
    {
        if (range.Contains(points[p]))
            pointsInRange.push_back(points[p]);
    }

    // Terminate here, if there are no children
    if (nw == 0)
        return pointsInRange;

    // Otherwise, add the points from the children
    AddGroup(pointsInRange, nw->QueryRange(range));
    AddGroup(pointsInRange, ne->QueryRange(range));
    AddGroup(pointsInRange, sw->QueryRange(range));
    AddGroup(pointsInRange, se->QueryRange(range));

    return pointsInRange;
}

int QuadTree::QueryCount(const Rect& range)
{
    // Prepare an array of results
    int pointsInRange = 0;

    // Automatically abort if the range does not collide with this quad
    if (!bounds.Intersects(range))
        return pointsInRange; // empty list

    // Check objects at this quad level
    for (int p = 0; p < sz; p++)
    {
        if (range.Contains(points[p]))
            pointsInRange++;
    }

    // Terminate here, if there are no children
    if (nw == 0)
        return pointsInRange;

    // Otherwise, add the points from the children
    pointsInRange += nw->QueryCount(range);
    pointsInRange += ne->QueryCount(range);
    pointsInRange += sw->QueryCount(range);
    pointsInRange += se->QueryCount(range);

    return pointsInRange;
}

QuadTree::~QuadTree()
{
    DelChildren();
}

// END INCLUDE

using namespace std;
#ifdef BENCH

#define VERIFY

# define DBG 1
# if DBG
#  define D(x) x;
# else
#  define D(x)
# endif
#endif // BENCH

#define CLR(x) memset(x, 0, sizeof x);
#define CLRN(x, n) memset(x, 0, (n)*sizeof x[0]);
#define REP(v,n) for(int v=0;v<n;v++)
#define FOR(v,a,b) for(int v=a;v<=b;v++)
#define every(iter, iterable) \
	typeof((iterable).begin()) iter = (iterable).begin(); iter != (iterable).end(); iter++

typedef int Num;
const Num maxn = 100006;
Num n,k;
Num xmax, xmin, ymax, ymin;
Num treew, treeh;

XY pbx[maxn], pby[maxn];
QuadTree *qtree;

struct SortX {
    bool operator()(const XY &a, const XY &b) const {
        return a.x < b.x || (a.x == b.x && a.y < b.y);
    }
} sortX;

struct SortY {
    bool operator()(const XY &a, const XY &b) const {
        return a.y < b.y || (a.y == b.y && a.x < b.x);
    }
} sortY;

Num getnum() {
	char cc,s;
	int dd;
	while (cc = getchar(), (cc<'0'||cc>'9')&&cc!='-');
	s=cc=='-'?-1:1;
	dd=cc=='-'?0:cc-'0';
	while (cc = getchar(), cc>='0'&&cc<='9')
		dd = dd*10+cc-'0';
	return dd*s;
}

Num solve() {
	// binary search
	int low = 0, len = low, hi = max(xmax - xmin, ymax - ymin);
	bool possible = false;
	Rect rs[4];
	while (low <= hi) {
		len = (low + hi) / 2;
        int h = len / 2;
		possible = false;

		int i,j;

		// search here
		for (i=0;i<n && !possible;i++) {
		    int rn;
		    if (len % 2 == 1) {
		        rn = 4;
                rs[0] = Rect(pbx[i].x - h, pbx[i].y - h, len+1, len+1);
                rs[1] = Rect(pbx[i].x - h - 1, pbx[i].y - h, len+1, len+1);
                rs[2] = Rect(pbx[i].x - h, pbx[i].y - h - 1, len+1, len+1);
                rs[3] = Rect(pbx[i].x - h - 1, pbx[i].y - h - 1, len+1, len+1);
		    } else {
		        rn = 1;
		        rs[0] = Rect(pbx[i].x - h, pbx[i].y - h, len+1, len+1);
		    }
		    for (j=0;j<rn;j++) {
		        int npts = qtree->QueryCount(rs[j]);
		        if (npts >= n-k) {
		            possible = true;
		            break;
		        }
		    }
		}

		// search done
		if (possible) {
			if (low >= hi - 1)
				break;
			else
				hi = len;
		}
		else
			low = len + 1;
	}

	if (possible)
		return len;

	return -1; // impossible
}

int main() {
	int T;
	Num i;
#if BENCH
//	freopen("files/pts.in","r",stdin);
	freopen("files/1_sample_input.txt","r",stdin);
#endif

	T = getnum();
	for (int tc = 0; tc < T; tc++) {
		n = getnum(); k = getnum();
		xmin = ymin = numeric_limits<Num>::max();
		xmax = ymax = numeric_limits<Num>::min();
		treew = treeh = 1;

		for (i = 0; i < n; i++) {
		    Num x,y;
			x = getnum(); y = getnum();

			// add the point
			pbx[i].x = pby[i].x = x; pbx[i].y = pby[i].y = y;

			xmin = min(xmin, x);
			xmax = max(xmax, x);
			ymin = min(ymin, y);
			ymax = max(ymax, y);

			if (xmax - xmin > treew)
			    treew *= 2;
			if (ymax - ymin > treeh)
			    treeh *= 2;
		}
		Rect rg(xmin, ymin, treew, treeh);

		// sort
		qtree = new QuadTree(rg);
		for (i = 0; i < n; i++)
		    qtree->Insert(pbx[i]);

#if DBG
		printf("Total points: %d\n", qtree->QueryCount(rg));
#endif

		printf("Case #%d\n", tc + 1);
		printf("%d\n", solve());

		delete qtree;
	}
	return 0;
}


// TODO
// boundary condition, possibly missing one of the best case. that is, nothing
// at center

// Debug
// The pts.in test file
// A lot of -1 TC
