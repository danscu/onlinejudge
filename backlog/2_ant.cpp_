#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;
#ifdef BENCH

# define DBG 0
# if DBG
#  define D(x) x;
# else
#  define D(x)
# endif
#endif // BENCH

#define CLR(x) memset(x, 0, sizeof x);
#define CLRN(x, n) memset(x, 0, (n)*sizeof x[0]);
#define REP(v,n) for(int v=0;v<n;v++)
#define FOR(v,a,b) for(int v=a;v<=b;v++)
#define every(iter, iterable) \
	typeof((iterable).begin()) iter = (iterable).begin(); iter != (iterable).end(); iter++

typedef int Num;
const Num maxn = 200006;
const Num maxm = 200006;

//Num g[maxn][maxn];
Num p[maxn];

Num n,m;

// 1 if common path, 0 if not
Num solve(Num x, Num y) {
    if (x>y) swap(x,y);
    // assuming y is lower

    int c = y;
    while (c != 1) {
        if (x == c)
            return 1;
        c = p[c];
    }

	return c == x;
}

int main() {
	int T;
	Num i, j;
#if BENCH
	freopen("files/2_sample_input.txt","r",stdin);
#endif

	cin >> T;
	for (int tc = 0; tc < T; tc++) {
		cin >> n >> m;
//		REP(i,n+1)
//		    CLRN(g[i],n+1);
		CLRN(p,n+1);
		for (i = 0; i < n - 1; i++) {
		    Num x,y;
			cin >> x >> y;
			if (x>y) swap(x,y); // x parent, y child
//			g[x][y] = 1;
			p[y] = x; // check if the smaller is always parent
		}
		cout << "Case #" << tc + 1 << endl;
		REP(i,m) {
		    Num x,y;
		    cin>>x>>y;
		    cout << solve(x,y) << endl;
		}
	}
	return 0;
}
