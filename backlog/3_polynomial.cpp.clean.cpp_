#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define CLR(x) memset(x, 0, sizeof x);
#define CLRN(x, n) memset(x, 0, (n)*sizeof x[0]);
#define REP(v,n) for(int v=0;v<n;v++)
#define FOR(v,a,b) for(int v=a;v<=b;v++)
#define every(iter, iterable) \
        typeof((iterable).begin()) iter = (iterable).begin(); iter != (iterable).end(); iter++

typedef int Num;
const Num maxn = 1004;
const double EPS = 1e-9;

struct Poly {
    int a,b,c,d;
    Poly (int a=0, int b=0, int c=0, int d=0) :
        a(a), b(b), c(c), d(d) {
    }

    Poly operator-(Poly &rhs) {
        Poly r(a - rhs.a, b-rhs.b, c-rhs.c, d-rhs.d);
        return r;
    }

    int solve(double &x1, double &x2) {
        // ax^2 + bx + c = 0
        if (a != 0) {
            int dlt = b * b - 4 * a * c;
            if (dlt >= 0) {
                double rd = sqrt(dlt);
                x1 = (rd - b) / (2*a);
                x2 = (-rd - b) / (2*a);

                if (dlt < EPS)
                    return 1;
                else
                    return 2;
            }
            return 0;
        } else {
            x1 = (double)(-c) / b;
            return 1;
        }
    }
};

Num n;
Poly p[maxn];

// #inter, #pieces
void solve() {
    int inters = 1;
    int segs = n * 2;
    REP(i,n-1) {
        int isegs = 2;
        FOR(j,i+1,n-1) {
            Poly diff = p[i] - p[j];
            double x1, x2;
            int rts = diff.solve(x1, x2);
            if (rts >= 1 && fabs(x1) >= EPS)
                inters++, isegs++, segs+=2;
            if (rts >= 2 && fabs(x2) >= EPS)
                inters++, isegs++, segs+=2;
        }
    }
    cout << inters << " " << segs << endl;
}

int main() {
        int T;
        Num i;

        cin >> T;
        for (int tc = 0; tc < T; tc++) {
                cin >> n;
                for (i = 0; i < n; i++)
                        cin >> p[i].a>>p[i].b>>p[i].c>>p[i].d;
                cout << "Case #" << tc + 1 << endl;
                solve();
        }
        return 0;
}
