#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#ifdef BENCH
#define DBG 0 // modify this for enabling/disable debug
#else
#define DBG 0
#endif // BENCH

#define D(...) do { if (DBG) fprintf(stdout, __VA_ARGS__); } while (0)

#define CLR(x) memset(x, 0, sizeof x);
#define CLRN(x, n) memset(x, 0, (n)*sizeof x[0]);
#define CLRVN(x, v, n) memset(x, v, (n)*sizeof x[0]);
#define REP(v,n) for(int v=0;v<n;v++)
#define FOR(v,a,b) for(int v=a;v<=b;v++)
#define every(iter, iterable) \
	typeof((iterable).begin()) iter = (iterable).begin(); iter != (iterable).end(); iter++

typedef int Num;
const Num maxn = 1000007;
int n;

struct Interval {
    int a;
    int b;
} iv[maxn];

struct IvCmp {
    bool operator()(const Interval &a, const Interval &b) const {
        return a.a < b.a;
    }
} ivCmp;

struct Data {
    int gaps;
    int a;
    int b;
};

enum {
    C = 1,
    S = 2
};
Data dp[maxn][2];

void putnum(int v) {
    char buf[64];
    int i=0;
    do {
        buf[i]=v%10;
        v/=10;
        i++;
    } while (v);
    while(i>0)
        putchar(buf[--i]+'0');
}

int getnum() {
    char cc;
    int dd;
    while (cc = getchar(), cc<'0'||cc>'9');
    dd=cc-'0';
    while (cc = getchar(), cc>='0'&&cc<='9')
        dd = dd*10+cc-'0';
    return dd;
}

void solve() {
    dp[1][C].a = iv[0].a;
    dp[1][C].b = iv[0].b;
    dp[1][S].a = dp[1][S] = -1;

    REP(i,n) {
        printf("%d %d\n", iv[i].a, iv[i].b);
    }
}

int main() {
#if BENCH
	freopen("files/r14_1_sample.txt","r",stdin);
#endif
	int T = getnum();
	for (int tc = 0; tc < T; tc++) {
	    n = getnum();
	    REP(i,n) {
	        iv[i].a = getnum();
	        iv[i].b = getnum();
	    }
	    sort(iv, iv + n, ivCmp);
		printf("Case #%d\n", tc + 1);
		solve();
	}
	return 0;
}
