/*
 * POJ 1741 Tree
 * Find node pairs whose distances <= k.
 *
 * Recursive algorithm:
 * 1) Split tree at centroid
 * 2) Resolve each subtree recursively
 * 3) Find pairs of nodes whose sum <= k
 * 4) Find pairs of nodes whose sum <= k and belong to the same subtree
 * 5) Pairs cross node is 3) - 4)
 *
 * 3) and 4) can be solved by sorting and O(nlogn) or even O(n) algo
 *
 * TODO - impl.
 */
#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#ifdef BENCH
#define DBG 0 // modify this for enabling/disable debug
#else
#define DBG 0
#endif // BENCH

#define D(...) do { if (DBG) fprintf(stdout, __VA_ARGS__); } while (0)

#define CLR(x) memset(x, 0, sizeof x);
#define CLRN(x, n) memset(x, 0, (n)*sizeof x[0]);
#define CLRVN(x, v, n) memset(x, v, (n)*sizeof x[0]);
#define REP(v,n) for(int v=0;v<n;v++)
#define FOR(v,a,b) for(int v=a;v<=b;v++)
#define every(iter, iterable) \
	typeof((iterable).begin()) iter = (iterable).begin(); iter != (iterable).end(); iter++

#define INF 100000000

// For pairs
typedef map<int,int> DistSet;	// number of nodes at dist

struct Edge {
    int y, next;
    int val;
};

template<int maxn>
struct Tree {
    Edge edges[maxn+1];	// edge store
    int child[maxn+1];	// first child for node
    bool visited[maxn+1];
    int map_sz;
    int n;

    // For centroid
	int minBal;
	int nodeMinBal;

    void insert(int x, int y, int val) {
    	D("insert (%d,%d)\n",x, y);
        map_sz++;							// allocate edge memory
        edges[map_sz].y = y;
        edges[map_sz].val = val;			// dist between x and y
        edges[map_sz].next = child[x];
        child[x] = map_sz; 					// add to linked list
    }

    // n = max number of nodes
    void init(int n) {
        map_sz = 0;
        this->n = n;
        CLRN(child, n + 1);
    }

    void prep_dfs() {
        CLRN(visited, n + 1);
    }

    // DFS
    // Returns tree size
    int dfs_centroid(int x) {
    	visited[x] = true;

    	int maxSubtree = 0;
    	int sz = 1; // self

        for (int idx = child[x]; idx; idx = edges[idx].next) {
        	int y = edges[idx].y;
        	if (visited[y]) continue;

        	int childSz = dfs_centroid(y);
        	sz += childSz;

        	maxSubtree = max(maxSubtree, childSz);
        }

        // The subtree at parent side: n - sz
        maxSubtree = max(maxSubtree, n - sz);

        // Generate optimal result
        if (maxSubtree < minBal) {
        	minBal = maxSubtree;
        	nodeMinBal = x;
        } else if (maxSubtree == minBal && x < nodeMinBal)
        	nodeMinBal = x;

    	D("Node=%d maxSubtree=%d\n", x, maxSubtree);

        return sz;
    }

public:
    void dfs_dist(int x, int distToRoot, DistSet &dset) {
    	for (int idx = child[x]; idx; idx = edges[idx].next) {
    		int y = edges[idx].y;
    		if (visited[y]) continue;

    		int dist = edges[idx].val + distToRoot;
    		dset[dist]++;
    		dfs_dist(y, dist, dset);
    	}
    }
 };

typedef int Num;
const Num maxn = 20005 * 2;

int n, k;
Tree<maxn> tree;

int solve(int root) {
	// find centroid
    tree.minBal = INF;
	tree.prep_dfs();
	tree.dfs_centroid(root);
	int centroid = tree.nodeMinBal;

	// find dist to centroid
	DistSet dset;
	tree.prep_dfs();
	tree.dfs_dist(centroid, 0, dset);

	int pairs = 0;
	// TODO find pairs within dist based on dset

	int inSubPairs = 0;
	// TODO Recursion -- split tree at centroid
	// Recursively find pairs within each subtree

	return pairs - inSubPairs;
}

int main() {
#if BENCH
	freopen("files/poj1741_tree.txt","r",stdin);
#endif
	while (scanf("%d%d", &n, &k), n) {
		tree.init(n);
		REP(i,n-1) {
			int x,y,d;
			scanf("%d%d%d", &x, &y, &d);
			tree.insert(x, y, d);
			tree.insert(y, x, d);
		}

		solve(1);
	}
	return 0;
}
