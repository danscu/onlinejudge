#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <stack>
#include <set>
#include <climits>
#include <cfloat>
#include <cmath>
#include <map>
#include <list>

using namespace std;

#define DBG 1

#if DBG
#define D(x) x;
#else
#define D(x)
#endif

const int maxn = 10000;
int n;

struct Pt {
	int x, y;
	int index;
};

struct PtSort {
	bool operator()(const Pt &a, const Pt &b) {
		return a.x < b.x || (a.x == b.x && a.y < b.y);
	}
} ptSort;

Pt P[maxn];
map<int,int> X; // last x value for y
bool g[maxn][maxn];
bool visited[maxn];

bool intersect(Pt &a, Pt &b, Pt &c, Pt &d) { 
	int hor1 = a.y == b.y;
	int hor2 = c.y == d.y;
	if (hor1 == hor2)
		return false;
	Pt *aa(hor1 ? &a : &c);
	Pt *bb(hor1 ? &b : &d);
	Pt *cc(hor1 ? &c : &a);
	Pt *dd(hor1 ? &d : &b);
	// aa-bb is horizontal, cc-dd is vertical
	if (aa->x > bb->x) swap(aa, bb);
	if (cc->y > dd->y) swap(cc, dd);
	return aa->x < cc->x && cc->x < bb->x && cc->y < aa->y && aa->y < dd->y;
}

bool contain_intersect(int u, int v, int matchR[]) {
	for (int i = 0; i < n; i++) {
		if (matchR[i] != -1)
			if (intersect(P[i], P[matchR[i]], P[u], P[v]))
				return true;
	}
	return false;
}

bool augpath(int u, int match[]) {
	for (int v = 0; v < n; v++) {
		if (g[u][v] && !visited[v] && !contain_intersect(u, v, match)) {
			visited[v] = true;

			if (match[v] == -1 || augpath(match[v], match)) {
				match[v] = u;
				match[u] = v;
				return true;
			}
		}
	}
	return false;
}

// return 1 if a match is found
int solve() {
	int i;
	sort(P, P + n, ptSort);

	// make graph
	int lastx=-1;
	for (i=0;i<n;i++) {
		if (P[i].x == lastx) {
			g[P[i].index][P[i-1].index] = 1;
			g[P[i-1].index][P[i].index] = 1;
		} else
			lastx = P[i].x;
		map<int,int>::iterator it = X.find(P[i].y);
		if (it != X.end()) {
			g[P[i].index][it->second] = 1;
			g[it->second][P[i].index] = 1;
			it->second = P[i].index;
		} else
			X[P[i].y] = P[i].index;
	}

	// find maximum match in graph (subject to intersection constraints)
	bool done = false;
	int match[n], cnt;
	while (!done) {
		done = true;
		memset(match, -1, sizeof match);
		cnt=0;
		for (i=0;i<n;i++) {
			if (match[i] != -1) continue;
			memset(visited, 0, n*(sizeof visited[0]));
			visited[i] = true;
			if (augpath(i, match))
				cnt+=2;
		}
		done = true; // always terminates
	}

	return cnt == n;
}

int main() {
	// input
#if BENCH
	freopen("dot_matching.txt", "r", stdin);
#endif

	int T, i;
	cin >> T;
	for (int tc = 0; tc < T; tc++) {
		cin >> n;
		for (i = 0; i < n; i++) {
			cin >> P[i].x >> P[i].y;
			P[i].index = i;
			memset(g[i], 0, sizeof(g[i][0])*n);
		}
		cout << "Case #" << tc + 1 << endl << (solve() ? "YES" : "NO") << endl;
	}
	return 0;
}
